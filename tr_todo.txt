RESEARCH ---------------------------------------------------------------------

- how does harfbuzz select charmap?

FEATURES / NOW ---------------------------------------------------------------

- lines:relayout(w, h, valign, halign)

- follow tabstops (for codedit)

- halign: justify.

- nowrap attribute (gsub space with NBSP).

- glyph substitution:
	- font_override text attribute for manual override.
	- register fallback fonts for script/language and try them in order.
	- match original font's size, weight, slant, stretch.
	- cache the substitutions.

LATER ------------------------------------------------------------------------

- underline / strikethrough (for accelerators and links):
	- color, thickness, style (single, double, wavy, image), dashes.

- run size/positioning modifiers:
	- raise: raise, subscript, superscript, sub, sup

- font modifiers:
	- %size, big, small

- opacity:
	- apply on the whole run
		- optimize to only do that if the runs are ligated (how can we know?)

- font_db selector: stretch/condensed...

- p attribute (add a PS for now; makes text more portable too).

- vertical alignment top/bottom margins option:
	- ascent/descent
	- spacing_ascent/spacing_descent
	- paragraph_ascent/paragraph_descent

- html-like markup parser with tags, attributes and escapes.
	- how is it better than serialized Lua which is syntax-highlighted in code
	and can be built iteratively without string concatenation?

ADVANCED LAYOUTING -----------------------------------------------------------

- vertical layouts:
	- gravity, gravity_hint?

- hb_feature modifiers:
	- font_variant: normal, smallcaps; smallcaps modifier

- bug: shaping words separately breaks contextual ligatures.
	- see: https://bugzilla.mozilla.org/show_bug.cgi?id=761442
	- is that true even if we call harfbuzz with the whole string and an offset?

- allow varying the formatting attributes (color, underline, etc.) within
a single shaped word, IOW consecutive text runs where only formatting attributes
are changed between runs should be shaped as a whole to preserve ligatures.

- allow varying the formatting attributes within a single grapheme, IOW
allow coloring the diacritical marks differently than the base glyph.

- underline to skip descenders:
	- fast outline intersection algorithm + caching the results.

- knuth's line wrapping algorithm.

- hyphenation: https://github.com/hunspell/hyphen (what libreoffice uses)

- letter spacing:
	- identify breaking points (see HB_UNSAFE_TO_BREAK_HERE flag).
	- adjust justification algorithm to include letter spacing.

- line wrapping inside an arbitrary enclosure (path).

- text rotation at arbitrary angles using rotated outlines:
	- convert glyph runs to cairo path objects and rasterize with cairo.

- arbitrary path baseline (eg. for names on maps):
	- same breaking points as for letter-spacing.
	- translate & rotate glyphs to match path's normals at glyph's center.

- advanced arbitrary path baseline (i.e. distorted glyphs):
	- extract glyphs outlines
	- break outlines into polygons
	- distort points based on path's normal vectors
	- rasterize new distorted outline


EDITING ----------------------------------------------------------------------

- insert mode cursor

- IME integration

- unicode debugging / visual editing aids:

	- show hex boxes for:
		- invalid bytes
		- missing glyphs
		- control characters

	- mark invisible characters positions:
		- ZW-NBSP: prevents ligatures
		- NBSP: prevents word-wrapping
		- SOFT HYPHEN: hyphenate if word-wrapping
		- ZWJ: force joining
		- ZWNJ: prevent joining
		- WORD JOINER: ZW-NBSP-like
		- LTR/RTL modifiers
		- variation selectors
		- hangul fillers

	- mark look-alike characters:   ; ꓸ ꓹ ꓽ

	- mark runs by script and language

	- spell checking: upgrade hunspell and integrate it:
		- highlighting, autocompletion, autocorrection, autoignore, manual ignore.

	- cursor:
		- show direction
		- show all codepoints individually between cursor and next cursor
		- shape/show all graphemes individually between cursor and next cursor

